{"version":3,"file":"static/js/848.c62f9374.chunk.js","mappings":"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","sources":["api/api.js","webpack://goit-react-hw-05-movies/./src/components/CastListItem/CastListItem.module.css?e493","components/CastListItem/CastListItem.jsx","webpack://goit-react-hw-05-movies/./src/components/Cast/Castlist.module.css?b957","components/Cast/CastList.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'b30e20b0751027d191af0344cc7d8939';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n    api_key: API_KEY,\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day`);\n  return response.data.results;\n};\n\nexport const fetchMovieByQuery = async movieName => {\n  const response = await axios.get(`search/movie?query=${movieName}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?`);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews?`);\n  return response.data.results;\n};","// extracted by mini-css-extract-plugin\nexport default {\"castImageWrap\":\"CastListItem_castImageWrap__sY-Qa\",\"nameWrap\":\"CastListItem_nameWrap__CPMt0\"};","import PropTypes from 'prop-types';\nimport css from './CastListItem.module.css';\n\nexport const CastListItem = ({ profilePath, originalName, name }) => {\n    return (\n        <li>\n            <img className={css.castImageWrap}\n                width=\"280\"\n                height=\"300\"\n                src={\n                    profilePath\n                        ? `https://image.tmdb.org/t/p/w300${profilePath}`\n                        : `https://fakeimg.pl/600x400?text=No+image+Available`\n                }\n                alt={originalName}\n            />\n            <p className={css.nameWrap}>{name}</p>\n        </li>\n    );\n};\n\nCastListItem.propTypes = {\n    profilePath: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    originalName: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n};","// extracted by mini-css-extract-plugin\nexport default {\"movieCastWrap\":\"Castlist_movieCastWrap__b9UfI\",\"castContainer\":\"Castlist_castContainer__9kWdX\",\"castNoticeWrap\":\"Castlist_castNoticeWrap__U6vE4\"};","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCast } from \"api/api\";\nimport { CastListItem } from 'components/CastListItem/CastListItem';\nimport css from './Castlist.module.css'\n\nconst CastList = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                const response = await fetchMovieCast(movieId);\n                setCast(response);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n        fetchCast();\n    }, [movieId]);\n    return (\n        <>\n            {cast.length !== 0 ? (\n                <div >\n                    <div className={css.castContainer}><h2>Movie Cast</h2> </div>\n                    <ul className={css.movieCastWrap}>\n                        {cast.map(({ id, profile_path, original_name, name }) => (\n                            <CastListItem\n                                key={id}\n                                id={id}\n                                profilePath={profile_path}\n                                original_name={original_name}\n                                name={name}\n                            />\n                        ))}\n                    </ul>\n                </div>\n            ) : (\n                <div className={css.castNoticeWrap}>We don't have any cast for this movie!</div>\n            )}\n        </>\n    );\n};\n\nexport default CastList;"],"names":["axios","api_key","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","sent","abrupt","data","results","stop","apply","arguments","fetchMovieByQuery","_ref2","_callee2","movieName","_context2","concat","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","_x2","fetchMovieCast","_ref4","_callee4","_context4","cast","_x3","fetchMovieReviews","_ref5","_callee5","_context5","_x4","CastListItem","profilePath","originalName","name","_jsxs","children","_jsx","className","css","width","height","src","alt","useParams","_useState","useState","_useState2","_slicedToArray","setCast","useEffect","fetchCast","t0","console","error","_Fragment","length","map","id","profile_path","original_name"],"sourceRoot":""}